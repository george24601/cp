A.
1. calculate rank in first alien lang
Rank(digits) = head(digits) * leng^len(digits) + Rank(tails(digits))
base case: single digit

2. calculate number in second alian lang given rank
Digits(rank) =   Digits(rank/length) + alpha[rank % length]
base case: rank < length

----
B.
Path(i,j) = turns to next + Path (next(i, j))
can use mod/number to simulate direciton when calculating turn to next

------
C.
F(D,B) = F(D-1, B-1) + F(D - 1, B)
You can Bsearch on D, B values if you can calculate F given D and B


-----
D
No perishable case

foreach item not in setB
	for each store
		for each fromStore
			cost[setB + item][store] = min(cost[setB+item][store], cost[setB][fromStore] + cost)

add item to setB
	

Perishable case

for each set order by size
	for each item not in the set
		foreach store
		 	if(item perishable)
				update cost[set + item][0] with new cost
			else
				get cheapest item from that store(precoumpted) , and update cost

	


