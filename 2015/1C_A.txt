Obviously, first guesses are wrong until we reach the part where only 1 row is possible

when we reach the that only row, which cell should we pick? probably try all?

Note that we probably dont need to try pos close to ends (only probably), i.e. first try

claim: first should be at W-1?

Consider first problem at pos i, with C and W:

base case len = W

Case A:
if the answer is miss
cost(true, C) = 
  1 + max(cost(true, i), cost(false, i), cost(true, C-i - 1), cost(false, C-i-1)) => we should pick an i to min the worst

where
cost(false, C) = 
  1+ max(cost(false, j), cost(false, C - j -1)) => and we should pick an j to min the worst

Case B:
if the answer is yes,
l is the up to the opponent pick the worst
 1 + max(costN(l, j, ) + costN(W - l, C-j-1))

-------
where 
costN(actual, C, maxPossible) = consider pick at k

if miss => cost is
 1 + costN(actual, k, maxPossible)

if hit => cost is

1 + costN(actual - k - 1, C - k -1, maxPossible - k -1)


-----------
so to sum up

cost(C, W) = 

Base case C == W
assert(C > W)

For first pick p from 1 to C, choose p to min
max of:
A. 1 + max(cost(p - 1, W), costWrongDir(p - 1, W), cost(C-p, W), costWrongDir(C-p, W)) 
B. For the cut remaining on the left l, from 0 to W - 1, choose l to max
    1 + costN(l, p - 1, W- 1) + costN(W - l -1, C -p, W-1) 

costN(actual, C, maxPossible) = 
actual <= C

if (actual == C)
 assert(maxPossible == actual)

For pick k from 1 to C, choose k to min
max of
A. 1 + costN(actual, k - 1, maxPossible)
B. k + costN(actual - k - 1, C - k,  maxPossible - k - 1)

costWrongDir(C) = 
FOr pick p from 1 to C, choose p to min
A. 1 + max(cost(p - 1, W), costWrongDir(p - 1, W), cost(C-p, W), costWrongDir(C-p, W)) 
=> seems converge with the cost(C, W)








