small input 10^5=> n^2 too slow!

sub problem: find a cut to form i, from left to right
since it is associative, we consider only the last letter case, as it will cover everything
i => 1 * i, j * k 
If consider from left,
if first letter is i * 1, j * k, k * -j

Solve small one first:
naive: scan from left to right, find first product of i, and then first product of j. and the remaining must be j, or the overall product of
string is -1

Had problem getting better insight, the naive approach is sound, but is it complete? try to prove it!

Bold Claim: If there exists an answer, then there exists an answer that is formed by the shortest prefix that forms i
Proof: suppose there is a shorter prefix that forms i, we know that the intermediate will be forming a 1, i.e., the 1 segment can belong to
either the i prefix or j prefix, we will just move it to the j prefix

By the same argument, there must exist an answer that is shortest j prefix after the shortest i prefix, if there ever exists one

so linear scan works for the small case.

implementation-wise, can use a table-driven design to implement multiplication logic,i.e., similar to a state machine
----
large case

large input 10^16=>may exist a closed form

in the small case: we can linear scan the whole string.

in the large case, we need to avoid this. Thus, we may scan for the first 2 prefixes, but suppose the answer exists: then because of
associatitivy, it must reduce to (i * j * k) = -1. We can just confirm it with the final product of whole string.

Note that we want to check whole string anyway, because of the repeated nature of input => we can get repeated product very quickly this
way, unlike linear scan

Since the system forms a group, we know keep multiplying will eventually return to itself, i.e., we dont NEED to try all prefixes, only a
subset of them, the group has 4 elements, i.e., max cycle length is 4,

consider the first prefix is the first segment, if i is formed from a pattern of prefix {repeats} suffix, repeats must be less than 4. and
prefix and suffix must be less than size of a single seg. i.e., within first 5 repeats of the segment, if an answer exists, it must be
there!
