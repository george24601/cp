input size 10K
first method:

if there is a decrease: the delta is # of eatan
if there is increase: could each nothing, with only put
i.e.

for each one, we check previous,
if less, the delta is eaten, otherwise, do nothing

second method
what is the min rate that she eats?
=> to be precise, how many she eats within 10 sec

if only increasing: 1 per sec
the slowest speed = max delta => otherwise she can't decrease as much!!

so find the largest delta => that is the MIN speed she eats, this delta >= 10
for each interval
if num < delta => eat += num

Reflection:
1. Can I reuse the result? Can I invent a new problem?
Streaming processing vs batch processing: given the final state (batch) what happened inside stream

2. Can I reuse the method?
The extreme actions with ceiling/boxing

------
all Bs will operate at full capacity
1B Cs, 1k Bs, each takes 100k mins to cut

when is the time that processed + being process = N or N - 1

log2 (100KB) = log2 (100 * (10^3)* (10^9)) = 10 + 30 + 7 = 47 probes

each check cost = 1K * 47 => 47 * 47 => total less than 2.5 mil

so for each probe
	calculate processed + being processed + # of open slotes

if processed + being processed + # of open slots(total) < N => need to do more
if  total == N there we go
if total > N
	if calc processed + being proceesed >= N => too big
	< N => there we go

so max time = #C * 100k

invalid + valid


Reflection:
1. Can I reuse the result? Can I invent a new problem?
How many we can server given a certain time => actually one of our steps!

2. Can I reuse the method?
Classic unknown-data swapping
Classic bsearch

------------
for each set,
gscan
update max set size number
