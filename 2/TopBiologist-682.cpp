#include <iostream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <iomanip>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <bitset>
#include <assert.h>
using namespace std;

typedef unsigned long long UL;
typedef long long LL;
#define LP(i, a, b) for (int i = int(a); i < int(b); i++)
#define LPE(i, a, b) for (int i = int(a); i <= int(b); i++)
typedef pair<int, int> PII;
typedef vector<vector<PII> > WAL;
typedef vector<vector<int> > SAL;
#define INF 2000000000
#define Ep 1e-9

/*
 4^6 > 2k,

 i.e., most likely to find a solution with length = 5,

 LP(length, 1, 6){
 	 LP(i, 0, n-length){
 	 	 take a substring
 	 	 put into set

 	 	 if(set size == target already)
 	 	 	 break;
 	 }

	generate all potential strings, find the missing one
 }
 */

class TopBiologist{


	char ACGT[4] = {'A', 'C', 'G', 'T'};

	string genAndFind(int remaining, string cur, set<string>& known){
		if(0 == remaining){
			if(known.count(cur))
				return "";
			else
				return cur;
		}

		LP(i, 0, 4){
			cur.push_back(ACGT[i]);
			string res = genAndFind(remaining -1, cur, known);

			if(res.length() > 0)
				return res;

			cur.pop_back();
		}

		return "";
	}

	public:

	string findShortestNewSequence(string sequence){
		int N = sequence.length();

		LPE(length, 1, 6){
			set<string> known;
			int fullSize = pow(4, length);

			bool isFull = false;
			LP(i, 0, N - length + 1){
				known.insert(sequence.substr(i, length));

				if(known.size() == fullSize){
					isFull = true;
					break;
				}
			}

			if(isFull)
				continue;

			return genAndFind(length, "", known);
		}

		return "";
	}
};


/*
int main() {

	TopBiologist test;

//	cout << test.findShortestNewSequence("A") << endl;
//	cout << test.findShortestNewSequence("AGACGACGGAGAACGA") << endl;
//	cout << test.findShortestNewSequence("AAGATACACCGGCTTCGTG") << endl;

	cout << test.findShortestNewSequence(
			"AGTCAAAGATACGAGGGTGCTATGTTTCCACGCTCCAAAAAGAATAACAGAAGGAGTAGCATAATGATTATCACAACGACTACCGAAGAGGATGACGGAGGGGGTGGCGTAGTGGTTGTCGCAGCGGCTGCCTAATAGTATTACTGATGGTGTTGCTTATTGTTTTTCTCATCGTCTTCCCAACAGCATCACCGACGGCGTCGCCTACTGCTTCTCCCACCGCCTCCCAAAAAAAGAAATAAACAAGAAAGGAAGTAAGCAATAAATGAATTAATCAACAAACGAACTAACCAGAAAGAGAGATAGACAGGAAGGGAGGTAGGCAGTAAGTGAGTTAGTCAGCAAGCGAGCTAGCCATAAATAGATATATACATGAATGGATGTATGCATTAATTGATTTATTCATCAATCGATCTATCCACAAACAGACATACACACGAACGGACGTACGCACTAACTGACTTACTCACCAACCGACCTACCCGAAAGAAGGAATGAACGAGAGAGGGAGTGAGCGATAGATGGATTGATCGACAGACGGACTGACCGGAAGGAGGGATGGACGGGAGGGGGGGTGGGCGGTAGGTGGGTTGGTCGGCAGGCGGGCTGGCCGTAAGTAGGTATGTACGTGAGTGGGTGTGTGCGTTAGTTGGTTTGTTCGTCAGTCGGTCTGTCCGCAAGCAGGCATGCACGCGAGCGGGCGTGCGCGCTAGCTGGCTTGCTCGCCAGCCGGCCTGCCCTAAATAAGTAATTAACTAGATAGGTAGTTAGCTATATATGTATTTATCTACATACGTACTTACCTGAATGAGTGATTGACTGGATGGGTGGTTGGCTGTATGTGTGTTTGTCTGCATGCGTGCTTGCCTTAATTAGTTATTTACTTGATTGGTTGTTTGCTTTATTTGTTTTTTTCTTCATTCGTTCTTTCCTCAATCAGTCATTCACTCGATCGGTCGTTCGCTCTATCTGTCTTTCTCTCCATCCGTCCTTCCCCAAACAAGCAATCAACCAGACAGGCAGTCAGCCATACATGCATTCATCCACACACGCACTCACCCGAACGAGCGATCGACCGGACGGGCGGTCGGCCGTACGTGCGTTCGTCCGCACGCGCGCTCGCCCTAACTAGCTATCTACCTGACTGGCTGTCTGCCTTACTTGCTTTCTTCCTCACTCGCTCTCTCCCCAACCAGCCATCCACCCGACCGGCCGTCCGCCCTACCTGCCTTCCTCCCCACCCGCCCTCCCCAAAAAAAAAGAAAATAAAACAAAGAAAAGGAAAGTAAAGCAAATAAAATGAAATTAAATCAAACAAAACGAAACTAAACCAAGAAAAGAGAAGATAAGACAAGGAAAGGGAAGGTAAGGCAAGTAAAGTGAAGTTAAGTCAAGCAAAGCGAAGCTAAGCCAATAAAATAGAATATAATACAATGAAATGGAATGTAATGCAATTAAATTGAATTTAATTCAATCAAATCGAATCTAATCCAACAAAACAGAACATAACACAACGAAACGGAACGTAACGCAACTAAACTGAACTTAACTCAACCAAACCGAACCTAACCCAGAAAAGAAGAGAATAGAACAGAGAAGAGGAGAGTAGAGCAGATAAGATGAGATTAGATCAGACAAGACGAGACTAGACCAGGAAAGGAGAGGATAGGACAGGGAAGGGGAGGGTAGGGCAGGTAAGGTGAGGTTAGGTCAGGCAAGGCGAGGCTAGGCCAGTAAAGTAGAGTATAGTACAGTGAAGTGGAGTGTAGTGCAGTTAAGTTGAGTTTAGTTCAGTCAAGTCGAGTCTAGTCCAGCAAAGCAGAGCATAGCACAGCGAAGCGGAGCGTAGCGCAGCTAAGCTGAGCTTAGCTCAGCCAAGCCGAGCCTAGCCCATAAAATAAGATAATATAACATAGAATAGGATAGTATAGCATATAATATGATATTATATCATACAATACGATACTATACCATGAAATGAGATGATATGACATGGA") << endl;

	return 0;
}
*/
